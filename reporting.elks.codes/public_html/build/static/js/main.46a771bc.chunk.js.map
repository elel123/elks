{"version":3,"sources":["constants/links.js","util/jwt.js","components/NavBar.js","components/PageLayout.js","pages/Landing.js","util/verifyToken.js","pages/Vis1.js","pages/Vis2.js","pages/Vis3.js","pages/Login.js","pages/Logout.js","pages/Custom404.js","pages/AdminView.js","App.js","reportWebVitals.js","index.js"],"names":["SITE_PAGES","LOGIN","LOGOUT","LANDING","VIS1","VIS2","VIS3","ADMIN","jwt","require","setToken","token","window","localStorage","removeItem","setItem","getToken","getItem","getAdminValFromToken","decode","complete","payload","isAdmin","NavBar","adminState","loginState","history","useHistory","setAdmin","logIn","setLogIn","redirect","route","push","Navbar","className","expand","Brand","onClick","style","Toggle","aria-controls","Collapse","id","Nav","Link","console","log","PageLayout","children","Landing","verifyToken","jwtToken","callback","fetch","method","headers","body","JSON","stringify","then","data","a","status","catch","error","Vis1","useState","setData","parseData","parsed","page","_id","indexOf","count","sort","b","topLabels","slice","map","entry","topValues","type","width","adjustLayout","plotarea","margin","marginTop","title","text","fontSize","legend","draggable","scaleX","label","labels","scaleY","plot","animation","effect","sequence","speed","series","values","useEffect","json","respData","Vis2","verifying","setVerifying","success","Vis3","loginUser","username","password","email","Login","setUserName","setPassword","submitForm","e","preventDefault","alert","onSubmit","value","onChange","target","Logout","Custom404","AdminView","users","setUsers","displayUsers","setDisplayUsers","editUser","setEditUser","addUser","setAddUser","deleteUser","setDeleteUser","currentUser","setCurrentUser","handleCloseEditUser","handleCloseAddUser","handleCloseDeleteUser","getAllUsers","handleSubmitEditUser","user","handleSubmitAddUser","usersHTML","handleOpenEditUser","handleOpenDeleteUser","Dialog","maxWidth","fullWidth","open","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","name","Select","inputProps","MenuItem","DialogActions","Button","color","handleSubmitDeleteUser","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46a771bc.chunk.js","sourcesContent":["// url links for all website pages\r\nexport class SITE_PAGES {\r\n    // Main Pages\r\n    static LOGIN = \"/login\";\r\n    static LOGOUT = \"/logout\";\r\n    static LANDING = \"/\";\r\n    static VIS1 = \"/vis1\";\r\n    static VIS2 = \"/vis2\";\r\n    static VIS3 = \"/vis3\";\r\n    static ADMIN = \"/admin\";\r\n}\r\n","const jwt = require(\"jsonwebtoken\");\r\n\r\nexport function setToken(token) {\r\n    if (token === null) {\r\n        window.localStorage.removeItem('jwttoken');\r\n    } else {\r\n        window.localStorage.setItem('jwttoken', token);\r\n    }\r\n}\r\n\r\nexport function getToken() {\r\n    return window.localStorage.getItem('jwttoken');\r\n}\r\n\r\nexport function getAdminValFromToken() { \r\n    let token = window.localStorage.getItem('jwttoken');\r\n    \r\n    if( token === null) { \r\n        return false; \r\n    }\r\n\r\n    let decodedToken = jwt.decode(token, {complete:true}); \r\n\r\n    return decodedToken.payload.isAdmin; \r\n}","import React, { useState, useEffect }  from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { SITE_PAGES } from \"../constants/links\";\r\nimport { setToken, getToken } from \"../util/jwt\";\r\n\r\nexport default function NavBar({ adminState, loginState }) {\r\n    const history = useHistory();\r\n\r\n    const {isAdmin, setAdmin} = adminState;\r\n    const {logIn, setLogIn} = loginState;\r\n\r\n    const logoutHandler = () => {\r\n        //TODO: clear the jwt from local storage\r\n        setLogIn(false);\r\n        setToken(null);\r\n        setAdmin(false);\r\n        //Redirect to logout page\r\n        history.push(SITE_PAGES.LOGOUT);\r\n    }\r\n\r\n    const redirect = (route) => {        \r\n        //Redirect user to their desired page\r\n        history.push(route);\r\n    }\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <Navbar className=\"bg-secondary\" expand=\"lg\">\r\n            <Navbar.Brand onClick={() => {history.push(SITE_PAGES.VIS1);}} style={{\"cursor\" : \"pointer\", \"color\" : \"#e6e6e6\"}}>Elks.Code Reporting </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    {/* This is just for testing */}\r\n                    <Nav.Link onClick={() => {setLogIn(!logIn)}} style={{\"color\": \"#e6e6e6\"}}>Toggle</Nav.Link>\r\n\r\n                    {\r\n                        logIn ?\r\n                        (\r\n                            <>\r\n                            <Nav.Link onClick={() => {redirect(SITE_PAGES.VIS1);}} style={{\"color\": \"#e6e6e6\"}}>Vis1</Nav.Link>\r\n                            <Nav.Link onClick={() => {redirect(SITE_PAGES.VIS2);}} style={{\"color\": \"#e6e6e6\"}}>Vis2</Nav.Link>\r\n                            <Nav.Link onClick={() => {redirect(SITE_PAGES.VIS3);}} style={{\"color\": \"#e6e6e6\"}}>Vis3</Nav.Link>\r\n                            <Nav.Link onClick={logoutHandler} style={{\"color\": \"#e6e6e6\"}}>Logout</Nav.Link>\r\n                            </>\r\n                        ) :\r\n                        null\r\n                    } \r\n\r\n                    { isAdmin ? (<Nav.Link onClick={() => {redirect(SITE_PAGES.ADMIN);}} style={{\"color\": \"#e6e6e6\"}}>Admin</Nav.Link>) : null }\r\n                    <Nav.Link onClick={() => {console.log(getToken())}} style={{\"color\": \"#e6e6e6\"}}>ViewToken</Nav.Link> \r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nexport default function PageLayout({ children, adminState, loginState }) {\r\n    return (\r\n        <div>\r\n            <NavBar loginState={loginState} adminState={adminState}/>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { SITE_PAGES } from \"../constants/links\";\r\n\r\nexport default function Landing() {\r\n    const history = useHistory();\r\n    return (\r\n        <div>\r\n            <p> This is the Landing Page! Welcome!!! :) </p>\r\n            <p onClick={() => {history.push(SITE_PAGES.LOGIN)}} style={{\"color\" : \"blue\", \"cursor\" : \"pointer\"}}><u>Return to login</u></p>\r\n        </div>\r\n    );\r\n}\r\n","export default function verifyToken(jwtToken, callback) {\r\n\r\n    fetch('https://www.elks.codes/server/jwt/verify', { \r\n        method: 'POST',\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({jwtToken})\r\n    })\r\n    .then( async (data) => {\r\n\r\n        callback(data.status == 200);\r\n\r\n    })\r\n    .catch((error) => {\r\n        callback(false);\r\n    }) \r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport verifyToken from \"../util/verifyToken\";\r\nimport { SITE_PAGES } from \"../constants/links\";\r\nimport { setToken, getToken, getAdminValFromToken } from \"../util/jwt\";\r\n\r\n//import the zingchart library\r\nimport 'zingchart/es6';\r\nimport ZingChart from 'zingchart-react';\r\n\r\n\r\nexport default function Vis1({ adminState, loginState }) {\r\n    const history = useHistory();\r\n    const {isAdmin, setAdmin} = adminState;\r\n    const {logIn, setLogIn} = loginState;\r\n\r\n    const [data, setData] = useState({});\r\n\r\n    const parseData = (data) => {\r\n        let parsed = [];\r\n        for (let page of data) {\r\n            if (page._id === null || page._id === \"\" || page._id.indexOf(\"public_html\") !== -1) {\r\n                continue;\r\n            }\r\n            parsed.push([page._id, page.count]);\r\n        }\r\n\r\n        parsed.sort((a, b) => {return b[1] - a[1]});\r\n\r\n        let topLabels = parsed.slice(0, 5).map(entry => entry[0]);\r\n        let topValues = parsed.slice(0, 5).map(entry => entry[1]);\r\n\r\n        \r\n        setData({\r\n            type: 'bar', \r\n            width: \"100%\",\r\n            adjustLayout: true, \r\n            plotarea: { \r\n                margin: 'dynamic',\r\n                marginTop: 70\r\n            },\r\n            title: {\r\n              text: 'Activity Per Page On elks.codes',\r\n              fontSize: 24,\r\n            },\r\n            legend: {\r\n              draggable: true,\r\n            },\r\n            scaleX: {\r\n              // Set scale label\r\n              label: { text: 'Page' },\r\n              // Convert text on scale indices\r\n              labels: topLabels\r\n            },\r\n            scaleY: {\r\n              // Scale label with unicode character\r\n              label: { text: 'Number of Activity' }\r\n            },\r\n            plot: {\r\n              // Animation docs here:\r\n              // https://www.zingchart.com/docs/tutorials/styling/animation#effect\r\n              animation: {\r\n                effect: 'ANIMATION_EXPAND_BOTTOM',\r\n                method: 'ANIMATION_STRONG_EASE_OUT',\r\n                sequence: 'ANIMATION_BY_NODE',\r\n                speed: 275,\r\n              }\r\n            },\r\n            series: [\r\n              {\r\n                // Plot 1 values, linear data\r\n                values: topValues,\r\n                text: \"Number of Activity\"\r\n              }\r\n            ]\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`https://www.elks.codes/server/api/activity/pages?jwt=${getToken()}`, { \r\n                method: 'GET',\r\n                headers:{\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n            .then( async (data) => {\r\n\r\n                if (data.status === 200) {\r\n\r\n                    setLogIn(true);\r\n                    setAdmin(getAdminValFromToken());\r\n\r\n                    let respData = await data.json();\r\n                    parseData(respData);\r\n\r\n                } else {\r\n                    //If token invalid, redirect to login\r\n                    setLogIn(false);\r\n                    setToken(null);\r\n                    setAdmin(false);\r\n                    history.push(SITE_PAGES.LOGIN);\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                //If token invalid, redirect to login\r\n                setLogIn(false);\r\n                setToken(null);\r\n                setAdmin(false);\r\n                history.push(SITE_PAGES.LOGIN);\r\n            }) \r\n\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n        <br></br>\r\n        <br></br>\r\n        <div style={{\"margin\" : \"0px 50px\"}}>\r\n            <ZingChart data={data} />\r\n        </div>\r\n        \r\n\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport verifyToken from \"../util/verifyToken\";\r\nimport { SITE_PAGES } from \"../constants/links\";\r\nimport { setToken, getToken } from \"../util/jwt\";\r\n\r\nexport default function Vis2({ adminState, loginState }) {\r\n    const history = useHistory();\r\n    const {isAdmin, setAdmin} = adminState;\r\n    const {logIn, setLogIn} = loginState;\r\n\r\n    const [verifying, setVerifying] = useState(true);\r\n\r\n    useEffect(() => {\r\n        verifyToken(getToken(), (success) => {\r\n            if (success) {\r\n                setVerifying(false);\r\n            } else {\r\n                //If token invalid, redirect to login\r\n                setLogIn(false);\r\n                setToken(null);\r\n                setAdmin(false);\r\n                history.push(SITE_PAGES.LOGIN);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!verifying) {\r\n\r\n            /* Proceed to fetch the data from the server to display on the page */\r\n            console.log(\"Access Granted\");\r\n\r\n        }\r\n    }, [verifying]);\r\n\r\n    return (\r\n        <div>\r\n            <p> This is the Vis #2 Page </p>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport verifyToken from \"../util/verifyToken\";\r\nimport { SITE_PAGES } from \"../constants/links\";\r\nimport { setToken, getToken } from \"../util/jwt\";\r\n\r\nexport default function Vis3({ adminState, loginState }) {\r\n    const history = useHistory();\r\n    const {isAdmin, setAdmin} = adminState;\r\n    const {logIn, setLogIn} = loginState;\r\n\r\n    const [verifying, setVerifying] = useState(true);\r\n\r\n    useEffect(() => {\r\n        verifyToken(getToken(), (success) => {\r\n            if (success) {\r\n                setVerifying(false);\r\n            } else {\r\n                //If token invalid, redirect to login\r\n                setLogIn(false);\r\n                setToken(null);\r\n                setAdmin(false);\r\n                history.push(SITE_PAGES.LOGIN);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!verifying) {\r\n\r\n            /* Proceed to fetch the data from the server to display on the page */\r\n            console.log(\"Access Granted\");\r\n\r\n        }\r\n    }, [verifying]);\r\n\r\n    return (\r\n        <div>\r\n            <p> This is the Vis #3 Page </p>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from 'prop-types'; \r\nimport { useHistory } from \"react-router-dom\";\r\nimport verifyToken from \"../util/verifyToken\";\r\n\r\nimport { SITE_PAGES } from \"../constants/links\";\r\nimport { setToken, getToken, getAdminValFromToken } from \"../util/jwt\";\r\n\r\nimport './Login.css'; \r\n\r\nasync function loginUser(username, password, callback) { \r\n    // TODO replace url \r\n    console.log(`${username} ${password}`);\r\n    fetch('https://www.elks.codes/server/user/login', { \r\n        method: 'POST',\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify( {email : username, password})\r\n    })\r\n    .then( async (data) => {\r\n\r\n        if (data.status === 200) {\r\n            let respData = await data.json();\r\n            callback(data, respData);\r\n        } else {\r\n            callback(null, null);\r\n        }\r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n        callback(null, null);\r\n    }) \r\n}\r\n\r\nexport default function Login({ adminState, loginState }) {\r\n    const [username, setUserName] = useState(\"\"); \r\n    const [password, setPassword] = useState(\"\"); \r\n\r\n    const history = useHistory();\r\n\r\n    const {isAdmin, setAdmin} = adminState;\r\n    const {logIn, setLogIn} = loginState;\r\n\r\n    useEffect(() => {\r\n        //Check if the user is already logged in\r\n        if (getToken() !== null) {\r\n            console.log(\"we are here\");\r\n            /* TODO: Check if user's token is still valid by checking with the backend */\r\n            verifyToken(getToken(), (success) => {\r\n                if (success) {\r\n                    // If token is valid --> redirect user to vis1\r\n                    console.log(\"redirecting\");\r\n                    setLogIn(true);\r\n                    setAdmin(getAdminValFromToken());\r\n                    history.push(SITE_PAGES.VIS1);\r\n                } else {\r\n                    // Else set the token to null and stay on this page\r\n                    console.log(\"clearing input\");\r\n                    setLogIn(false);\r\n                    setToken(null);\r\n                    setAdmin(false);\r\n                }\r\n            });\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    const submitForm = async e => { \r\n        e.preventDefault(); \r\n        loginUser(username, password, (data, json) => {\r\n            if (data == null) {\r\n                alert(\"Login Failed. Please Try Again.\");\r\n                //Reset the username and pw fields\r\n                setUserName(\"\");\r\n                setPassword(\"\");\r\n            } else {\r\n                setToken(json.token);\r\n                setLogIn(true);\r\n\r\n                if (json.isAdmin) {\r\n                    setAdmin(true);\r\n                }\r\n\r\n                history.push(SITE_PAGES.VIS1); //Redirect the user to the first data viz page\r\n            }\r\n        }); \r\n    }\r\n    return (\r\n        <div className='login-wrapper' style={{\"marginTop\" : \"50px\"}}>\r\n            <h1> Log In </h1>\r\n            <br></br>\r\n            <form onSubmit = {submitForm}>\r\n                <label>\r\n                    <p>Username</p>\r\n                    <input type=\"text\" value={username} onChange={ e => setUserName(e.target.value)} />\r\n                </label>\r\n                <br></br> \r\n                <label>\r\n                    <p>Password</p>\r\n                    <input type=\"password\" value={password} onChange={ e => setPassword(e.target.value)} />\r\n                </label>\r\n                <div>\r\n                    <br></br>\r\n                    <button type=\"submit\">Log In</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Login.propTypes = {\r\n//     tokenState: PropTypes.isRequired\r\n// }","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SITE_PAGES } from \"../constants/links\";\r\n\r\nexport default function Logout() {\r\n    const history = useHistory();\r\n    return (\r\n        <div>\r\n            <p> This is the Logout Page </p>\r\n            <p onClick={() => {history.push(SITE_PAGES.LOGIN)}} style={{\"color\" : \"blue\", \"cursor\" : \"pointer\"}}><u>Return to login</u></p>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Custom404() {\r\n    return (\r\n        <div>\r\n            <p> This is the Custom404 Page </p>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { SITE_PAGES } from \"../constants/links\";\r\nimport { setToken, getToken } from \"../util/jwt\";\r\n\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\nexport default function AdminView({ adminState }) {\r\n    const history = useHistory();\r\n    const {isAdmin, setAdmin} = adminState\r\n\r\n    const [users, setUsers] = useState([]);\r\n    const [displayUsers, setDisplayUsers] = useState([]);\r\n\r\n    const [editUser, setEditUser] = useState(false); \r\n    const [addUser, setAddUser] = useState(false); \r\n    const [deleteUser, setDeleteUser] = useState(false); \r\n\r\n\r\n    const [currentUser, setCurrentUser] = useState({_id: \"\", email: \"\", password: \"\", isAdmin: false});\r\n\r\n    // Functions to manage displaying of add/edit/delete user dialog\r\n    const handleOpenEditUser = (user) => { \r\n        setCurrentUser(user);\r\n        setEditUser(true);\r\n    }\r\n    const handleCloseEditUser = (e) => { \r\n        setEditUser(false);\r\n    }\r\n\r\n    const handleOpenAddUser = () => { \r\n        setCurrentUser({_id: \"\", email: \"\", password: \"\", isAdmin: false});\r\n        setAddUser(true);\r\n    }\r\n    const handleCloseAddUser = (e) => { \r\n        setAddUser(false);\r\n    }\r\n\r\n    const handleOpenDeleteUser = (user) => { \r\n        setCurrentUser(user);\r\n        setDeleteUser(true);\r\n    }\r\n    const handleCloseDeleteUser = (e) => { \r\n        setDeleteUser(false);\r\n    }\r\n\r\n\r\n    const getAllUsers = () => {\r\n        //Attempt to fetch the user data with the user's jwt\r\n        //If successful, save in users \r\n        //Else redirect user to vis1 page\r\n        fetch(`https://www.elks.codes/server/user?jwt=${getToken()}`, { \r\n            method: 'GET',\r\n            headers:{\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n        .then( async (data) => {\r\n            if (data.status === 200) {\r\n                let respData = await data.json();\r\n                setUsers([...respData]);\r\n                // console.log(JSON.stringify(respData));\r\n            } else {\r\n                console.log(data);\r\n                alert(\"You do not have admin privileges.\");\r\n                // history.push(SITE_PAGES.VIS1);\r\n            }\r\n\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            alert(\"You do not have admin privileges.\");\r\n            // history.push(SITE_PAGES.VIS1);\r\n        }) \r\n    }\r\n\r\n    const handleSubmitEditUser = (user) => { \r\n        // fetch(`http://127.0.0.1:9000/user`, { \r\n        fetch(`https://www.elks.codes/server/user`, { \r\n            method: 'POST',\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ \r\n                jwt: getToken(),\r\n                _id: currentUser.id, \r\n                email: currentUser.email, \r\n                isAdmin: currentUser.isAdmin, \r\n                password: user.password === currentUser.password ? null : currentUser.password, \r\n            })\r\n        })\r\n        .then( async (data) => {\r\n            // Upon successful update, get all users again \r\n            if(data.status === 200) { \r\n                console.log(\"update user succeeded\");\r\n                alert(\"User edit success\");\r\n                getAllUsers();\r\n            }\r\n            else { \r\n                alert(\"User edit failed, please try again later\");\r\n                console.log(\"update user failed\");\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            alert(\"User edit failed, please try again later\");\r\n        })\r\n\r\n        setEditUser(false);\r\n\r\n    }\r\n\r\n    const handleSubmitAddUser = () => { \r\n        // fetch(`http://127.0.0.1:9000/user/register`, { \r\n        fetch(`https://www.elks.codes/server/user/register`, { \r\n            method: 'POST',\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ \r\n                jwt: getToken(),\r\n                email: currentUser.email, \r\n                isAdmin: currentUser.isAdmin, \r\n                password: currentUser.password, \r\n            })\r\n        })\r\n        .then( async (data) => {\r\n            // Upon successful adding, get all users again \r\n            if(data.status === 200) { \r\n                console.log(\"add user succeeded\");\r\n                alert(\"User successfully added\");\r\n                getAllUsers();\r\n            }\r\n            else if( data.status === 409) { \r\n                console.log(\"HERE\");\r\n                alert(\"User with this email already exists\");\r\n            } \r\n            else { \r\n                alert(\"Add User failed, please try again later\");\r\n                console.log(\"add user failed\");\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            alert(\"Add User failed, please try again later\");\r\n        })\r\n\r\n        setAddUser(false);\r\n    }\r\n\r\n    const handleSubmitDeleteUser = (user) => { \r\n        // fetch(`http://127.0.0.1:9000/user/${user._id}?jwt=${getToken()}`, { \r\n        fetch(`https://www.elks.codes/server/user/${user._id}?jwt=${getToken()}`, { \r\n            method: 'GET',\r\n        })\r\n        .then( async (data) => {\r\n            // Upon successful delete, get all users again \r\n            if(data.status === 200) { \r\n                console.log(\"user successfully deleted\");\r\n                alert(\"User successfully deleted\");\r\n                getAllUsers();\r\n            }\r\n            else { \r\n                alert(\"User deletion failed, please try again later\");\r\n                console.log(\"user deletion failed\");\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            alert(\"User deletion failed, please try again later\");\r\n        })\r\n\r\n        setDeleteUser(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllUsers(); \r\n    }, []);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n\r\n        let usersHTML = users.map((user) => {\r\n            return (\r\n                <li key={user._id}>\r\n                    <div>\r\n                        <p>Email: {user.email}</p>\r\n                        <p>Hashed Password: {user.password}</p>\r\n                        <p>Is Admin: {user.isAdmin ? \"Yes\" : \"No\"}</p>\r\n                        <button onClick={() => {handleOpenEditUser(user)}}>Edit</button>\r\n                        <button onClick={() => {handleOpenDeleteUser(user)}}>Delete</button>\r\n                        <Dialog maxWidth='xl' fullWidth={true} open={editUser} onClose={handleCloseEditUser} aria-labelledby=\"form-dialog-title\" >\r\n                            <DialogTitle id=\"edit-user-dialog-title\">Edit User</DialogTitle>\r\n                            <DialogContent>\r\n                                <p> Leave Password blank if you do not wish to change it</p>\r\n                                <span style={{\"color\": \"gray\"}}> <small>Email: &nbsp; </small></span>\r\n                                <span> {currentUser.email} </span> \r\n                                <br></br>\r\n                                <span style={{\"color\": \"gray\"}}> <small>Password: &nbsp; </small></span>\r\n                                <TextField name=\"password\" id=\"password\" onChange={ e => setCurrentUser({ ...currentUser, password: e.target.value})}  value={currentUser.password}/>\r\n                                <br></br>\r\n                                <span style={{\"color\": \"gray\"}}> <small>Is Admin&nbsp; </small></span>\r\n                                <Select\r\n                                    value={currentUser.isAdmin}\r\n                                    onChange={ e => setCurrentUser({ ...currentUser, isAdmin: e.target.value})}\r\n                                    inputProps={{\r\n                                        name: 'isAdmin',\r\n                                        id: 'isAdmin', \r\n                                    }}\r\n                                >\r\n                                    <MenuItem value={false}>No</MenuItem>\r\n                                    <MenuItem value={true}>Yes</MenuItem>\r\n                                </Select>\r\n                            </DialogContent>\r\n                            <DialogActions> \r\n                                <Button onClick={handleCloseEditUser} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={handleSubmitEditUser} color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                        <Dialog maxWidth='xl' fullWidth={true} open={addUser} onClose={handleCloseAddUser} aria-labelledby=\"form-dialog-title\" >\r\n                            <DialogTitle id=\"add-user-dialog-title\">Add User</DialogTitle>\r\n                            <DialogContent>\r\n                                <span style={{\"color\": \"gray\"}}> <small>Email: &nbsp; </small></span>\r\n                                <TextField name=\"email\" id=\"email\" onChange={ e => setCurrentUser({ ...currentUser, email: e.target.value})}  value={currentUser.email}/>\r\n                               \r\n                                <br></br>\r\n                                <span style={{\"color\": \"gray\"}}> <small>Password: &nbsp; </small></span>\r\n                                <TextField name=\"password\" id=\"password\" onChange={ e => setCurrentUser({ ...currentUser, password: e.target.value})}  value={currentUser.password}/>\r\n\r\n                                <br></br>\r\n                                <span style={{\"color\": \"gray\"}}> <small>Is Admin&nbsp; </small></span>\r\n                                <Select\r\n                                    value={currentUser.isAdmin}\r\n                                    onChange={ e => setCurrentUser({ ...currentUser, isAdmin: e.target.value})}\r\n                                    inputProps={{\r\n                                        name: 'isAdmin',\r\n                                        id: 'isAdmin', \r\n                                    }}\r\n                                >\r\n                                    <MenuItem value={false}>No</MenuItem>\r\n                                    <MenuItem value={true}>Yes</MenuItem>\r\n                                </Select>\r\n                            </DialogContent>\r\n                            <DialogActions> \r\n                                <Button onClick={handleCloseAddUser} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={handleSubmitAddUser} color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                        <Dialog maxWidth='xl' fullWidth={true} open={deleteUser} onClose={handleCloseDeleteUser} aria-labelledby=\"form-dialog-title\" >\r\n                            <DialogTitle id=\"add-user-dialog-title\">Confirm User Deletion</DialogTitle>\r\n                            <DialogContent>\r\n                                <span style={{\"color\": \"gray\"}}> <small>Email: &nbsp; </small></span>\r\n                                <span> {currentUser.email }</span>\r\n                                <br></br>\r\n\r\n                                <span style={{\"color\": \"gray\"}}> <small>Password: &nbsp; </small></span>\r\n                                <span> {currentUser.password }</span>\r\n                                <br></br>\r\n\r\n                                <span style={{\"color\": \"gray\"}}> <small>Is Admin&nbsp; </small></span>\r\n                                <span> {currentUser.isAdmin ? \"Yes\" : \"No\" }</span>\r\n                            </DialogContent>\r\n                            <DialogActions> \r\n                                <Button onClick={handleCloseDeleteUser} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={ () => { handleSubmitDeleteUser(user) }} color=\"primary\">\r\n                                    Delete\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n             \r\n                    </div>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        setDisplayUsers(usersHTML);\r\n\r\n    }, [users, editUser, addUser, deleteUser, currentUser]);\r\n\r\n    return (\r\n        <div>\r\n            <p>This is the Admin Page</p>\r\n            <p>Users: </p>\r\n            <button onClick={handleOpenAddUser}> Add User</button>\r\n            <ul>{displayUsers}</ul>\r\n        </div>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { SITE_PAGES } from \"./constants/links\";\r\n\r\nimport PageLayout from \"./components/PageLayout\";\r\nimport Landing from \"./pages/Landing\";\r\nimport Vis1 from \"./pages/Vis1\";\r\nimport Vis2 from \"./pages/Vis2\";\r\nimport Vis3 from \"./pages/Vis3\";\r\nimport Login from \"./pages/Login\";\r\nimport Logout from \"./pages/Logout\";\r\nimport Custom404 from \"./pages/Custom404\";\r\nimport AdminView from \"./pages/AdminView\";\r\n\r\nfunction App() {\r\n    const [isAdmin, setAdmin] = useState(false);\r\n    const [logIn, setLogIn] = useState(false);\r\n\r\n    return (\r\n        <Router>\r\n            {/* Switch gurantees that a URL can match to only one route */}\r\n            <PageLayout loginState={{logIn, setLogIn}} adminState={{isAdmin, setAdmin}}>\r\n                <Switch>\r\n                    {/* Login */}\r\n                    <Route exact path={SITE_PAGES.LOGIN}>\r\n                        <Login loginState={{logIn, setLogIn}} adminState={{isAdmin, setAdmin}} />\r\n                    </Route>\r\n                    {/* Logout Confirmation */}\r\n                    <Route exact path={SITE_PAGES.LOGOUT}>\r\n                        <Logout />\r\n                    </Route>\r\n                    {/* Landing Page Upon Login */}\r\n                    <Route exact path={SITE_PAGES.LANDING}>\r\n                        <Landing />\r\n                    </Route>\r\n                    {/* Visualization Page */}\r\n                    <Route exact path={SITE_PAGES.VIS1}>\r\n                        <Vis1 loginState={{logIn, setLogIn}} adminState={{isAdmin, setAdmin}} />\r\n                    </Route>\r\n                    {/* Visualization Page */}\r\n                    <Route exact path={SITE_PAGES.VIS2}>\r\n                        <Vis2 loginState={{logIn, setLogIn}} adminState={{isAdmin, setAdmin}} />\r\n                    </Route>\r\n                    {/* Visualization Page */}\r\n                    <Route exact path={SITE_PAGES.VIS3}>\r\n                        <Vis3 loginState={{logIn, setLogIn}} adminState={{isAdmin, setAdmin}} />\r\n                    </Route>\r\n\r\n                    {/* Admin Page */}\r\n                    <Route exact path={SITE_PAGES.ADMIN}>\r\n                        <AdminView loginState={{logIn, setLogIn}} adminState={{isAdmin, setAdmin}} />\r\n                    </Route>\r\n\r\n                    {/* Any other URL is automatically matched to 404 Page */}\r\n                    <Route path=\"/\">\r\n                        <Custom404 />\r\n                    </Route>\r\n                </Switch>\r\n            </PageLayout>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}